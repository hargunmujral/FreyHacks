schema {
	query: Query
	mutation: Mutation
}

enum RAIN {
    NOT_ALLOWED
    ENCOURAGED
    ALLOWED
	AFTER
}

type Validity {
	id: ID!
	scores: [Float]! #length 12, float from 0-10
}

type Activity {
	id: ID!
	name: String
	ideal_temp: Int!
	ideal_wind: Int!
	rain: RAIN!
	ideal_pop: Int!
	ideal_visibility: Int!
	ideal_uvi: Int!
	created_at: String!
	verified: Boolean!
	public: Boolean!
	validity_id: Int
	validity: Validity
}

type ActivityResult {
	success: Boolean!
	errors: [String]
	activity: Activity
}

type ActivitiesResult {
	success: Boolean!
	errors: [String]
	activities: [Activity]
}

type Schedule {
	id: ID!
	monday_start: Int!
	monday_end: Int!
	tuesday_start: Int!
	tuesday_end: Int!
	wednesday_start: Int!
	wednesday_end: Int!
	thursday_start: Int!
	thursday_end: Int!
	friday_start: Int!
	friday_end: Int!
	saturday_start: Int!
	saturday_end: Int!
	sunday_start: Int!
	sunday_end: Int!
}

type DeleteResult {
	success: Boolean!
	errors: [String]
}

# should there be something for current temps for an event?

type Event {
	id: ID!
	name: String!
	date: String!
	start_time: String!
	end_time: String!
	location: String!
	activity_id: ID!
	activity: Activity!
	validity_id: Int
	validity: Validity
}

type EventResult {
	success: Boolean!
	errors: [String]
	event: Event
}

type EventsResult {
	success: Boolean!
	errors: [String]
	events: [Event]
}

type User {
	id: ID!
	username: String!
	display_name: String
	created_at: String!
	show_unverified: Boolean!
	activity_ids: [ID]!
	activities: [Activity]!
	friend_ids: [ID]!
	friends: [User]!
	event_ids: [ID]!
	events: [Event]!
	lon: Float!
	lat: Float!
}

type UserResult {
	success: Boolean!
	errors: [String]
	user: User
}

type UsersResult {
	success: Boolean!
	errors: [String]
	users: [User]
}

type Query {
	health: String!

	listUsers: UsersResult!
	getUser(username: String!): UserResult!
	login(username: String!, password: String!): UserResult!

	listActivities: ActivitiesResult!
	getActivity(id: ID!): ActivityResult!

	listEvents: EventsResult!
	getEvent(id: ID!): EventResult!
}

type Mutation {
	createUser(username: String!, password: String!): UserResult!

	deleteUser(id: ID!): DeleteResult!
	updateUser(username: String!, display_name: String): UserResult!

	createActivity(username: String!, name: String!, ideal_temp: Int!, ideal_wind: Int!, rain: RAIN!, ideal_pop: Int!, ideal_visibility: Int!, ideal_uvi: Int!): ActivityResult!
	updateActivity(id: ID!, username: String!, ideal_temp: Int, ideal_wind: Int, rain: RAIN, ideal_pop: Int, ideal_visibility: Int, ideal_uvi: Int): ActivityResult!
	deleteActivity(id: ID!): DeleteResult!

	createEvent(username: String!, name: String!, date: String!, start_time: String!, end_time: String!, location: String!, activity_id: ID!, public: Boolean!): EventResult!
	updateEvent(id: ID!, username: String!, name: String, date: String, start_time: String, end_time: String, location: String, activity_id: ID, public: Boolean): EventResult!
	deleteEvent(id: ID!): DeleteResult!
}