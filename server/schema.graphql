schema {
	query: Query
	mutation: Mutation
}

enum RAIN {
    NOT_ALLOWED
    ENCOURAGED
    ALLOWED
	AFTER
}

type Activity {
	id: ID!
	name: String!
	min_temp: Int!
	max_temp: Int!
	min_wind: Int!
	max_wind: Int!
	rain: RAIN!
	created_at: String!
	verified: Boolean!
	public: Boolean!
}

type ActivityResult {
	success: Boolean!
	errors: [String]
	activity: Activity
}

type ActivitiesResult {
	success: Boolean!
	errors: [String]
	activities: [Activity]
}

type Schedule {
	id: ID!
	monday_start: Int!
	monday_end: Int!
	tuesday_start: Int!
	tuesday_end: Int!
	wednesday_start: Int!
	wednesday_end: Int!
	thursday_start: Int!
	thursday_end: Int!
	friday_start: Int!
	friday_end: Int!
	saturday_start: Int!
	saturday_end: Int!
	sunday_start: Int!
	sunday_end: Int!
}

type DeleteResult {
	success: Boolean!
	errors: [String]
}

# should there be something for current temps for an event?

type Event {
	id: ID!
	name: String!
	date: String!
	start_time: String!
	duration: String!
	location: String!
	activity_id: ID!
}

type EventResult {
	success: Boolean!
	errors: [String]
	event: Event
}

type EventsResult {
	success: Boolean!
	errors: [String]
	events: [Event]
}

type User {
	id: ID!
	username: String!
	display_name: String
	created_at: String!
	activity_ids: [ID]!
	activities: [Activity]!
	show_unverified: Boolean!
	friend_ids: [ID]!
	friends: [User]!
}

type UserResult {
	success: Boolean!
	errors: [String]
	user: User
}

type UsersResult {
	success: Boolean!
	errors: [String]
	users: [User]
}

type Query {
	health: String!

	listUsers: UsersResult!
	getUser(username: String!): UserResult!
	login(username: String!, password: String!): UserResult!

	listActivities: ActivitiesResult!
	getActivity(id: ID!): ActivityResult!

	listEvents: EventsResult!
	getEvent(id: ID!): EventResult!
}

type Mutation {
	createUser(username: String!, password: String!): UserResult!

	deleteUser(id: ID!): DeleteResult!
	updateUser(username: String!, display_name: String): UserResult!

	createActivity(name: String!, min_temp: Int!, max_temp: Int!, min_wind: Int!, max_wind: Int!, rain: RAIN!): ActivityResult!
	updateActivity(id: ID!, min_temp: Int!, max_temp: Int!, min_wind: Int!, max_wind: Int!, rain: RAIN!): ActivityResult!
	deleteActivity(id: ID!): DeleteResult!

	createEvent(name: String!, date: String!, start_time: String!, duration: String!, location: String!, activity_id: ID!, public: Boolean!): EventResult!
	updateEvent(id: ID!, name: String, date: String, start_time: String, duration: String, location: String, activity_id: ID, public: Boolean): EventResult!
	deleteEvent(id: ID!): DeleteResult!
}